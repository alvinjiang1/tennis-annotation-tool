### LLM Prompt: Automated Tennis Rally Analysis (JSON Output)

**Objective:**  
You are an AI assistant tasked with analyzing a sequence of images representing the **hitting moments** of a single **tennis rally**. Your goal is to infer key shot characteristics and structure the analysis in a **JSON format**.

---

### Inputs:  
You will be provided with **n ordered images** (sorted chronologically), where each image captures the moment a player is hitting the ball. The last image in the sequence represents the **final shot of the rally**.

Each player is identified by their **clothing, position (near or far court), handedness (right-handed or left-handed), and whether they are in the ad or deuce court**.

---

### Definitions:
1. **Player Information:**  
   - Players are labeled as **P1, P2, P3, or P4** (based on detected bounding boxes).
   - Each player has a known **handedness (RH for right-handed, LH for left-handed)**.

2. **Court Location:**  
   - **Ad Court**: Left half of the court (from the player's perspective).  
   - **Deuce Court**: Right half of the court (from the player's perspective).  
   - **Near Court**: Closer to the camera.  
   - **Far Court**: Further from the camera.  

3. **Shot Information:**
   - **Shot Type:**  
     - **Serve** (first shot of the rally).  
     - **Return** (response to the serve).  
     - **Stroke** (any subsequent shot).  
   - **Shot Direction:**  
     - **Crosscourt (CC):** A shot traveling diagonally across the net.
     - **Down the Line (DL):** A shot traveling parallel to the sideline.
     - **Inside-Out (IO):** A shot hit from **deuce court to ad court on the opposite side**.
     - **Inside-In (II):** A shot hit from **deuce court straight down the same-side deuce court**.

#### IMPORTANT: Shot Direction Rules Based on Handedness
- **Crosscourt (CC) and Down the Line (DL) are always based on actual court positioning.**
- **Inside-Out (IO) and Inside-In (II) are only applied when a player is deliberately redirecting a shot from their natural stance.**
- Examples:
  - A **right-handed player in ad court hitting crosscourt** → **CC (Crosscourt)**
  - A **left-handed player in deuce court hitting crosscourt** → **CC (Crosscourt)**
  - A **right-handed player in ad court hitting inside-out (IO)** → **Ball must travel to opposite deuce court**
  - A **left-handed player in deuce court hitting inside-in (II)** → **Ball must stay within the deuce side**

- **Shot Outcome:**  
  - **In** (rally continues).  
  - **Win** (shot was a winner).  
  - **Err** (shot resulted in an error).  

---

### Final Frame Analysis:
- The **last image in the sequence always represents the last shot of the rally**.
- The rally ends with **either a winner (win) or an error (err)**.
- The outcome should be determined based on **where the ball is located**:
  - If the ball is **out** or **in the net**, it is an **error (err)**.
  - If the opponent **cannot reach the ball**, it is a **winner (win)**.

---

### JSON Output Format Example
The analysis should return a JSON structure formatted as follows:

{
    "fps": 29.0,
    "height": 720,
    "width": 1280,
    "num_frames": 44,
    "video": "miami-2024-sf-bopanna-ebden-granollers-zeballos_13209_13253",
    "far_name": "Granollers & Zeballos",
    "far_hand": "RH & LH",
    "near_name": "Bopanna & Ebden",
    "near_hand": "RH & RH",
    "events": [
        {
            "player": "P1",
            "frame": 15,
            "label": "near_deuce_serve_-_-_W_in",
            "outcome": "in"
        },
        {
            "player": "P3",
            "frame": 44,
            "label": "far_deuce_return_bh_gs_CC_err",
            "outcome": "err"
        }
    ]
}

---

### Steps for Generating the JSON Output:
1. Extract metadata (`fps`, `resolution`, `num_frames`, etc.).
2. Identify players and their **handedness** (RH or LH).
3. Iterate through **each shot transition**:
   - Identify the **player hitting the shot**.
   - Determine the **court location** (near/far, deuce/ad).
   - Classify the **shot type** (serve, return, stroke).
   - Infer the **shot direction** (CC, DL, II, IO) based on **handedness & court position**.
   - Record the **outcome** (in, win, err).
4. Since 2 frames are used to deduce the outcome of a single shot, a rally with **n frames** should have **exactly n - 1 shots**.
4. Store the structured rally data in JSON format.


